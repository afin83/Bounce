package  {	import flash.text.*;	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;		public class Config {		private static var __instance:Config;				public var mainClass:Main;				//Sensitivity of what motion it picks up		public var sensitivity = 1500000;//HELPER INFORMATION						public var helperDimensionsX = 1024;		public var helperDimensionsY = 768;		//Helper Colour		public var helperColour = 0xff333333;		//Show the Helper		public var helperOn = true;		// the limit of difference between motion before it snaps the backgroup back		public var differenceLimit = 1000;		public var snapLimit = 10;//VIDEO INFORMATION		//Video screen size		public var videoDimensionsX = 1024;		public var videoDimensionsY = 768;		//Showing the video		public var videoOn = false;//BALL INFORMATION		// circle to difference point collosion radius		public var ballRadius = 30;		// Ball size		public var ballWidth = 70;		public var ballHeight = 70;		//Ball Bounce Speed		public var bounceSpeedx = 1;		public var bounceSpeedy = 1;				public var ballSpeedx = 3;		public var ballSpeedy = 3;				public var gravity = .9;		public var friction = .94;//TIMETABLE INFORMATION		public var timetableRefresh:Number = 1000;		public var timetableTextField:TextField = new TextField();		public var timetableFormat:TextFormat = new TextFormat();		public var timetableBoldFormat:TextFormat = new TextFormat();		public var timetableFont = new Font1();				public var highlightbustime = 5;				public var numberOfBuses:Number = 5;						public var theClock:Sprite = new Sprite();				public var lines:Array = new Array();				public function Config(__stopper:SingletonEnforcer) {			// constructor code			runstuff();		}				private function runstuff() {			trace("Running stuff");					}				public static function getInstance() {			if(__instance) {				return __instance;			} else {				__instance = new Config(new SingletonEnforcer());				return __instance;			}		}				public function getTimetableFields():Array {			for(var i=0; i<numberOfBuses; i++) {				var tmptextfield = new TextField();				formatLine(tmptextfield);				lines.push(tmptextfield);			}			return lines;		}				public function setTimetableText(routes:Array) {			for(var i=0; i<lines.length; i++) {				if(i < routes.length) {					if(routes[i].substr(0,1) == "*") {						routes[i] = routes[i].substr(1);						timetableFormat.font = timetableFont.fontName;						timetableFormat.color = 0xFF0000; 					} else {						timetableFormat.font = timetableFont.fontName;						timetableFormat.color = 0x000000; 					}					(lines[i] as TextField).text = routes[i];					(lines[i] as TextField).setTextFormat(timetableFormat);				} else {					trace("NO MORE DATA TO FILL LINES");				}			}		}					public function formatLine(timetableTextField:TextField) {			timetableTextField.text = "textfield";				timetableTextField.width = 350;				timetableTextField.height = 300;				timetableTextField.background = false;				timetableTextField.x = 688;				timetableTextField.y = 110;								//propeties of text field				timetableTextField.selectable = false;				timetableTextField.border = false;								timetableTextField.multiline = false;				timetableTextField.wordWrap = true;								//Giving the format a hex decimal color code				timetableFormat.font = timetableFont.fontName;				timetableFormat.color = 0x000000; 								timetableTextField.embedFonts = true;				timetableTextField.antiAliasType = AntiAliasType.ADVANCED;								//Adding text size				timetableFormat.size = 16;								//adding format to text field 				setTextFrmt(timetableTextField, timetableFormat);				return timetableTextField;		}				public function returnTextField(canSelect:Boolean, isMulti:Boolean, format:TextFormat):TextField{								timetableTextField.text = "textfield";				timetableTextField.width = 350;				timetableTextField.height = 300;				timetableTextField.background = false;				timetableTextField.x = 670;				timetableTextField.y = 100;								//propeties of text field				timetableTextField.selectable = canSelect;				timetableTextField.border = false;								timetableTextField.multiline = isMulti;				timetableTextField.wordWrap = true;								//Giving the format a hex decimal color code				timetableFormat.font = timetableFont.fontName;				timetableFormat.color = 0x000000; 								timetableTextField.embedFonts = true;				timetableTextField.antiAliasType = AntiAliasType.ADVANCED;								//Adding text size				timetableFormat.size = 18;								//adding format to text field 				setTextFrmt(timetableTextField, format);				return timetableTextField;			}			public function setTextFrmt(textObject:TextField, format:TextFormat):void{				textObject.setTextFormat(format);			}	}	}class SingletonEnforcer {		}