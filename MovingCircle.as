package{        import flash.events.Event;    import flash.events.MouseEvent;        import flash.display.Sprite;    import flash.display.Bitmap;	import flash.display.MovieClip;            public class MovingCircle extends MovieClip    {                // GRAVITY          public static var gravity:Number = Config.getInstance().gravity;        		//FRICTION		private var frCoeff:Number = Config.getInstance().friction;                        private var oldx:Number;        private var oldy:Number;				public var score:Number = 69;				public var xspeed:Number;		public var yspeed:Number;                private var gfx:Bitmap;                [ Embed ( source = "beachball.png" ) ] private var ball:Class;                        public function MovingCircle ( )        {                        gfx = new ball( );                        addChild( gfx );                                    gfx.width = Config.getInstance().ballWidth;            gfx.height = Config.getInstance().ballHeight;                        gfx.x = - width / 2;            gfx.y = - height / 2;                    }				public function addtoscore(points:Number) {			score += points;		}                public function init ( ):void                            {                        x = width / 2 + Math.random( ) * ( stage.stageWidth - width / 2 );                    y = height / 2 + Math.random( ) * ( stage.stageHeight - height / 2 );                        xspeed = 1 + Math.random( ) * Config.getInstance().ballSpeedx;            yspeed = 1 + Math.random( ) * Config.getInstance().ballSpeedy;                        // starting triggering step function based on enterframe event                        addEventListener( Event.ENTER_FRAME , step );                    }				public function cancel():void {			removeEventListener( Event.ENTER_FRAME , step );		}                private function moveCircle ( event:MouseEvent ):void        {                        // storing previous coordinates                        oldx = x;            oldy = y;                        x = event.stageX;            y = event.stageY;                        // calculating new speed components                        xspeed = x - oldx;            yspeed = y - oldy;                    }	                public function step ( event:Event ):void        {                        //yspeed += gravity;						//add friction			xspeed *= frCoeff;			yspeed *= frCoeff;						            this.rotation += xspeed;			var hitbounds = false;                        // bouncing ball at stage edges                        if ( x + xspeed > stage.stageWidth - width / 2  && xspeed > 0)             {            	//trace("RIGHT");                xspeed *= -1;   				hitbounds = true;				this.x = stage.stageWidth - width / 2;                            }            else if ( x + xspeed < width / 2 && xspeed < 0)             {            	//trace("LEFT");                xspeed *= -1;				hitbounds = true;            	this.x = width/2;            }                        if ( y + yspeed > stage.stageHeight - height / 2  && yspeed > 0)             {            	//trace("BOTTOM");                yspeed *= -1;				hitbounds = true;				this.y = (stage.stageHeight - height / 2);				//yspeed = (stage.stageHeight - height / 2)-this.y;				score = 0;				Config.getInstance().mainClass.drawRedRipple(this.x,this.y,this.score);				Config.getInstance().mainClass.drawRedLine();            }            else if ( y + yspeed < height / 2  && yspeed < 0)            {                //trace("TOP");                yspeed *= -1;  				hitbounds = true;				this.y = height/2;            }   			if(!hitbounds) {				this.x += xspeed;            	this.y += yspeed;			} else {							}						//GRAVITY			yspeed += gravity;			        }				    }  }